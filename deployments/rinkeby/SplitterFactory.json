{
  "address": "0xABFE680298f34c2d2F2C5f392dFAB8d2b79A51Ed",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "splitterType",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "AddedSplitterType",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "splitterType",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "payee",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "indexed": false,
          "internalType": "struct ISplitter.Shares[]",
          "name": "shares",
          "type": "tuple[]"
        }
      ],
      "name": "CreatedSplitter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "splitterType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "addSplitterType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "splitterType",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "payee",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "bps",
              "type": "uint16"
            }
          ],
          "internalType": "struct ISplitter.Shares[]",
          "name": "shares",
          "type": "tuple[]"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "splitterType",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "get",
      "outputs": [
        {
          "internalType": "contract ISplitter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "instances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf381645887809f2346b03970400eac9c208da25ffcf7ad0ad72dff5eacae4449",
  "receipt": {
    "to": null,
    "from": "0xDEE48aB42ceEb910c8C61a8966A57Dcf3E8B6706",
    "contractAddress": "0xABFE680298f34c2d2F2C5f392dFAB8d2b79A51Ed",
    "transactionIndex": 27,
    "gasUsed": "725943",
    "logsBloom": "0x
    "blockHash": "0xa708fcfb59fcc1c881403744367f10b422e244b0f47b71dc6cd5fe689a9a07cd",
    "transactionHash": "0xf381645887809f2346b03970400eac9c208da25ffcf7ad0ad72dff5eacae4449",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 9893562,
        "transactionHash": "0xf381645887809f2346b03970400eac9c208da25ffcf7ad0ad72dff5eacae4449",
        "address": "0xABFE680298f34c2d2F2C5f392dFAB8d2b79A51Ed",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dee48ab42ceeb910c8c61a8966a57dcf3e8b6706"
        ],
        "data": "0x",
        "logIndex": 35,
        "blockHash": "0xa708fcfb59fcc1c881403744367f10b422e244b0f47b71dc6cd5fe689a9a07cd"
      }
    ],
    "blockNumber": 9893562,
    "cumulativeGasUsed": "4038092",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "060bfd410e505c6a7b6baeae41816d77",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"splitterType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"AddedSplitterType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"splitterType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct ISplitter.Shares[]\",\"name\":\"shares\",\"type\":\"tuple[]\"}],\"name\":\"CreatedSplitter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"splitterType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"addSplitterType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"splitterType\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct ISplitter.Shares[]\",\"name\":\"shares\",\"type\":\"tuple[]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"splitterType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"contract ISplitter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AddedSplitterType(bytes32,address,address)\":{\"params\":{\"contractAddress\":\"the address of the splitting contract template\",\"creator\":\"address adding the splitter template\",\"splitterType\":\"the type of splitter\"}},\"CreatedSplitter(uint256,bytes32,address,address,(address,uint16)[])\":{\"params\":{\"contractAddress\":\"the address of the splitting contract\",\"creator\":\"the edition's owner\",\"index\":\"the identifier of newly created edition\",\"shares\":\"the shares splitting rules\",\"splitterType\":\"the type of splitter\"}}},\"kind\":\"dev\",\"methods\":{\"addSplitterType(bytes32,address)\":{\"params\":{\"implementation\":\"ISplitter implementation contract to clone\",\"splitterType\":\"type of splitter\"}},\"create(bytes32,(address,uint16)[])\":{\"params\":{\"shares\":\"list of tuples representing the payees and their shares in bps\",\"splitterType\":\"type of splitter\"}},\"get(bytes32,uint256)\":{\"params\":{\"index\":\"id of splitter to get contract for\",\"splitterType\":\"type of splitter\"},\"returns\":{\"_0\":\"the Splitter payment contract\"}},\"instances()\":{\"returns\":{\"_0\":\"the number of splitter instances released so far\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"AddedSplitterType(bytes32,address,address)\":{\"notice\":\"Emitted when a splitter type is added. \"},\"CreatedSplitter(uint256,bytes32,address,address,(address,uint16)[])\":{\"notice\":\"Emitted when a splitter is created. \"}},\"kind\":\"user\",\"methods\":{\"addSplitterType(bytes32,address)\":{\"notice\":\"Initializes the factory with the address of the implementation contract template \"},\"create(bytes32,(address,uint16)[])\":{\"notice\":\"Creates a new splitter contract as a factory with a deterministic address, returning the address of the newly created splitter contract. Returns the id of the created splitter contract. \"},\"get(bytes32,uint256)\":{\"notice\":\"Gets a splitter given the unique identifier \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/splitters/SplitterFactory.sol\":\"SplitterFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x94dd781aa290742d990ccb720b3cab52a3865d1ba004e35c1dc757aa3ee788e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/splitters/ISplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * \\u2591\\u2588\\u2584\\u2591\\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\u2591\\u2591\\u2592\\u2588\\u2580\\u2584\\u2592\\u2584\\u2580\\u2584\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2584\\u2592\\u2584\\u2588\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588\\u2584\\u2591\\u2588\\u2591\\u2580\\u2588\\u2580\\u2591\\u2591\\u2591\\u2584\\u2580\\u2580\\u2592\\u2588\\u2580\\u2584\\u2591\\u2588\\u2592\\u2591\\u2591\\u2588\\u2591\\u2580\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\u2592\\u2588\\u2588\\u2580\\u2592\\u2588\\u2580\\u2584\\u2591\\u2584\\u2580\\u2580\\r\\n * \\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580\\u2591\\u2592\\u2588\\u2592\\u2592\\u2591\\u2591\\u2588\\u2580\\u2592\\u2591\\u2588\\u2580\\u2588\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2592\\u2580\\u2592\\u2588\\u2591\\u2588\\u2584\\u2584\\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2592\\u2588\\u2592\\u2592\\u2591\\u2592\\u2584\\u2588\\u2588\\u2591\\u2588\\u2580\\u2592\\u2592\\u2588\\u2584\\u2584\\u2591\\u2588\\u2591\\u2592\\u2588\\u2592\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2584\\u2584\\u2591\\u2588\\u2580\\u2584\\u2592\\u2584\\u2588\\u2588\\r\\n * \\r\\n * Made with \\ud83e\\udde1 by Kreation.tech\\r\\n */\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\ninterface ISplitter {\\r\\n    struct Shares {\\r\\n        address payable payee;\\r\\n        uint16 bps;\\r\\n    }\\r\\n    \\r\\n    function initialize(Shares[] memory shares) external;\\r\\n\\r\\n}\",\"keccak256\":\"0x43bf10028dd01719511bd8c133f687d6e8ad5726ab86d7e498a2a98746393c2d\",\"license\":\"MIT\"},\"contracts/splitters/PushSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * \\u2591\\u2588\\u2584\\u2591\\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\u2591\\u2591\\u2592\\u2588\\u2580\\u2584\\u2592\\u2584\\u2580\\u2584\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2584\\u2592\\u2584\\u2588\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588\\u2584\\u2591\\u2588\\u2591\\u2580\\u2588\\u2580\\u2591\\u2591\\u2591\\u2584\\u2580\\u2580\\u2592\\u2588\\u2580\\u2584\\u2591\\u2588\\u2592\\u2591\\u2591\\u2588\\u2591\\u2580\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\u2592\\u2588\\u2588\\u2580\\u2592\\u2588\\u2580\\u2584\\u2591\\u2584\\u2580\\u2580\\r\\n * \\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580\\u2591\\u2592\\u2588\\u2592\\u2592\\u2591\\u2591\\u2588\\u2580\\u2592\\u2591\\u2588\\u2580\\u2588\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2592\\u2580\\u2592\\u2588\\u2591\\u2588\\u2584\\u2584\\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2592\\u2588\\u2592\\u2592\\u2591\\u2592\\u2584\\u2588\\u2588\\u2591\\u2588\\u2580\\u2592\\u2592\\u2588\\u2584\\u2584\\u2591\\u2588\\u2591\\u2592\\u2588\\u2592\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2584\\u2584\\u2591\\u2588\\u2580\\u2584\\u2592\\u2584\\u2588\\u2588\\r\\n * \\r\\n * Made with \\ud83e\\udde1 by Kreation.tech\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./ISplitter.sol\\\";\\r\\n\\r\\ncontract PushSplitter is Initializable, ISplitter {\\r\\n    \\r\\n    address[] internal _payees;\\r\\n    mapping(address => uint16) internal _shares;\\r\\n    \\r\\n    constructor() initializer { }\\r\\n    \\r\\n    function initialize(Shares[] memory shares) public override initializer {\\r\\n        require(shares.length > 0, \\\"Splitter: no payees\\\");\\r\\n        uint256 totalShares = 0;\\r\\n        for (uint i = 0; i < shares.length; i++) {\\r\\n            _addPayee(shares[i].payee, shares[i].bps);\\r\\n            totalShares += shares[i].bps;\\r\\n        }\\r\\n        require(totalShares == 10_000, \\\"Shares don't sum up to 10000 pbs\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Adds a new payee to the contract.\\r\\n     * \\r\\n     * @param account the address of the payee to add.\\r\\n     * @param shares the number of shares owned by the payee.\\r\\n     */\\r\\n    function _addPayee(address account, uint256 shares) internal {\\r\\n        require(account != address(0x0), \\\"Splitter: account is 0x0 address\\\");\\r\\n        require(shares > 0 && shares < 10_000, \\\"Splitter: invalid shares\\\");\\r\\n        require(_shares[account] == 0, \\\"Splitter: account duplicated\\\");\\r\\n\\r\\n        _payees.push(account);\\r\\n        _shares[account] = uint16(shares);\\r\\n    }\\r\\n\\r\\n    receive() external payable virtual {\\r\\n        uint256 value = address(this).balance;\\r\\n        for (uint i = 0; i < _payees.length; i++) {\\r\\n            uint256 amount = value * _shares[_payees[i]] / 10_000;\\r\\n            AddressUpgradeable.sendValue(payable(_payees[i]), amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferTo(address from, address payable to, uint16 amount) external {\\r\\n        require(_shares[from] > 0, \\\"Splitter: no shares to transfer\\\");\\r\\n        require(amount == 0 || _shares[from] >= amount, \\\"Splitter: exceeding transfer\\\");\\r\\n        uint16 transfer = _shares[from];\\r\\n        if (amount > 0 && amount < transfer) {\\r\\n            transfer = amount;\\r\\n        }\\r\\n        _shares[to] += transfer;\\r\\n        _shares[from] -= transfer;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf537eedc7a92cc0dac3608888340f3f2b8f624bf90e190dca425c8118bb19f51\",\"license\":\"MIT\"},\"contracts/splitters/ShakeableSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * \\u2591\\u2588\\u2584\\u2591\\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\u2591\\u2591\\u2592\\u2588\\u2580\\u2584\\u2592\\u2584\\u2580\\u2584\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2584\\u2592\\u2584\\u2588\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588\\u2584\\u2591\\u2588\\u2591\\u2580\\u2588\\u2580\\u2591\\u2591\\u2591\\u2584\\u2580\\u2580\\u2592\\u2588\\u2580\\u2584\\u2591\\u2588\\u2592\\u2591\\u2591\\u2588\\u2591\\u2580\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\u2592\\u2588\\u2588\\u2580\\u2592\\u2588\\u2580\\u2584\\u2591\\u2584\\u2580\\u2580\\r\\n * \\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580\\u2591\\u2592\\u2588\\u2592\\u2592\\u2591\\u2591\\u2588\\u2580\\u2592\\u2591\\u2588\\u2580\\u2588\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2592\\u2580\\u2592\\u2588\\u2591\\u2588\\u2584\\u2584\\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2592\\u2588\\u2592\\u2592\\u2591\\u2592\\u2584\\u2588\\u2588\\u2591\\u2588\\u2580\\u2592\\u2592\\u2588\\u2584\\u2584\\u2591\\u2588\\u2591\\u2592\\u2588\\u2592\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2584\\u2584\\u2591\\u2588\\u2580\\u2584\\u2592\\u2584\\u2588\\u2588\\r\\n * \\r\\n * Made with \\ud83e\\udde1 by Kreation.tech\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"./ISplitter.sol\\\";\\r\\n\\r\\ncontract ShakeableSplitter is ISplitter, ContextUpgradeable  {\\r\\n\\r\\n    event PaymentFailed(address to);\\r\\n    event PaymentReleased(address to, uint256 amount);\\r\\n    event PaymentReceived(address from, uint256 amount);\\r\\n\\r\\n    uint256 private _totalReleased;\\r\\n\\r\\n    mapping(address => uint256) private _released;\\r\\n    mapping(address => uint16) public shares;\\r\\n    address[] private _payees;\\r\\n\\r\\n    constructor() initializer { }\\r\\n\\r\\n    function initialize(Shares[] memory _shares) public override initializer {\\r\\n        uint256 totalShares = 0;\\r\\n        for (uint i = 0; i < _shares.length; i++) {\\r\\n            _payees.push(_shares[i].payee);\\r\\n            shares[_shares[i].payee] = _shares[i].bps;\\r\\n            totalShares += _shares[i].bps;\\r\\n        }\\r\\n        require(totalShares == 10_000, \\\"Shares don't sum up to 100%\\\");\\r\\n    }\\r\\n\\r\\n    receive() external payable virtual {\\r\\n        emit PaymentReceived(_msgSender(), msg.value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the total amount of Ether already released.\\r\\n     */\\r\\n    function totalReleased() public view returns (uint256) {\\r\\n        return _totalReleased;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of Ether already released to a payee.\\r\\n     */\\r\\n    function released(address account) public view returns (uint256) {\\r\\n        return _released[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\\r\\n     * total shares and their previous withdrawals.\\r\\n     */\\r\\n    function withdraw(address payable account) public virtual {\\r\\n        _withdraw(account);\\r\\n    }\\r\\n\\r\\n    function _withdraw(address payable account) internal virtual {\\r\\n        require(shares[account] > 0, \\\"Splitter: account has no shares\\\");\\r\\n\\r\\n        uint256 totalReceived = address(this).balance + totalReleased();\\r\\n        uint256 payment = _pendingPayment(account, totalReceived, released(account));\\r\\n\\r\\n        require(payment != 0, \\\"Splitter: account is not due payment\\\");\\r\\n\\r\\n        _released[account] += payment;\\r\\n        _totalReleased += payment;\\r\\n\\r\\n        AddressUpgradeable.sendValue(account, payment);\\r\\n        emit PaymentReleased(account, payment);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev internal logic for computing the pending payment of an `account` given the token historical balances and\\r\\n     * already released amounts.\\r\\n     */\\r\\n    function _pendingPayment(address account, uint256 totalReceived, uint256 alreadyReleased) private view returns (uint256) {\\r\\n        return (totalReceived * shares[account]) / 10_000 - alreadyReleased;\\r\\n    }\\r\\n\\r\\n    function safeShake() external {\\r\\n        uint256 totalReceived = address(this).balance + _totalReleased;\\r\\n        for (uint i = 0; i < _payees.length; i++) {\\r\\n            if(_pendingPayment(_payees[i], totalReceived, _released[_payees[i]]) > 0) {\\r\\n                try this.withdraw(payable(_payees[i])) {\\r\\n                    // do nothing\\r\\n                } catch {\\r\\n                    emit PaymentFailed(_payees[i]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function shake() external {\\r\\n        uint256 totalReceived = address(this).balance + _totalReleased;\\r\\n        for (uint i = 0; i < _payees.length; i++) {\\r\\n            if(_pendingPayment(_payees[i], totalReceived, _released[_payees[i]]) > 0) {\\r\\n                _withdraw(payable(_payees[i]));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawable(address payable account) public view returns(uint256) {\\r\\n        require(shares[account] > 0, \\\"Splitter: account has no shares\\\");\\r\\n\\r\\n        uint256 totalReceived = address(this).balance + totalReleased();\\r\\n        return _pendingPayment(account, totalReceived, released(account));\\r\\n    }\\r\\n\\r\\n    function transferTo(address from, address payable to) external {\\r\\n        require(shares[from] > 0, \\\"Splitter: no shares to transfer\\\");\\r\\n        shares[to] += shares[from];\\r\\n        shares[from] = 0;\\r\\n        _released[to] += _released[from];\\r\\n        _released[from] += 0;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3cbd1319c3f6c8f61c4a52bcaa5deb1a27a0b784fe11448d41cbc56b10839047\",\"license\":\"MIT\"},\"contracts/splitters/SplitterFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * \\u2591\\u2588\\u2584\\u2591\\u2588\\u2592\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\u2591\\u2591\\u2592\\u2588\\u2580\\u2584\\u2592\\u2584\\u2580\\u2584\\u2591\\u2580\\u2584\\u2580\\u2591\\u2588\\u2584\\u2592\\u2584\\u2588\\u2592\\u2588\\u2588\\u2580\\u2591\\u2588\\u2584\\u2591\\u2588\\u2591\\u2580\\u2588\\u2580\\u2591\\u2591\\u2591\\u2584\\u2580\\u2580\\u2592\\u2588\\u2580\\u2584\\u2591\\u2588\\u2592\\u2591\\u2591\\u2588\\u2591\\u2580\\u2588\\u2580\\u2591\\u2580\\u2588\\u2580\\u2592\\u2588\\u2588\\u2580\\u2592\\u2588\\u2580\\u2584\\u2591\\u2584\\u2580\\u2580\\r\\n * \\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2588\\u2580\\u2591\\u2592\\u2588\\u2592\\u2592\\u2591\\u2591\\u2588\\u2580\\u2592\\u2591\\u2588\\u2580\\u2588\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2592\\u2580\\u2592\\u2588\\u2591\\u2588\\u2584\\u2584\\u2591\\u2588\\u2592\\u2580\\u2588\\u2591\\u2592\\u2588\\u2592\\u2592\\u2591\\u2592\\u2584\\u2588\\u2588\\u2591\\u2588\\u2580\\u2592\\u2592\\u2588\\u2584\\u2584\\u2591\\u2588\\u2591\\u2592\\u2588\\u2592\\u2591\\u2592\\u2588\\u2592\\u2591\\u2588\\u2584\\u2584\\u2591\\u2588\\u2580\\u2584\\u2592\\u2584\\u2588\\u2588\\r\\n * \\r\\n * Made with \\ud83e\\udde1 by Kreation.tech\\r\\n */\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nimport \\\"./ISplitter.sol\\\";\\r\\nimport \\\"./PushSplitter.sol\\\";\\r\\nimport \\\"./ShakeableSplitter.sol\\\";\\r\\n\\r\\ncontract SplitterFactory is Ownable {\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    // Counter for current contract id\\r\\n    Counters.Counter internal _counter;\\r\\n\\r\\n    // Addresses of implementations of ISplitter contracts to clone\\r\\n    mapping(bytes32 => address) private _implementations;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    /**\\r\\n     * Initializes the factory with the address of the implementation contract template\\r\\n     * \\r\\n     * @param splitterType type of splitter\\r\\n     * @param implementation ISplitter implementation contract to clone\\r\\n     */\\r\\n    function addSplitterType(bytes32 splitterType, address implementation) external onlyOwner {\\r\\n        require(Address.isContract(implementation), \\\"Not a contract\\\");\\r\\n        require(_implementations[splitterType] == address(0x0), \\\"Splitter type already defined\\\");\\r\\n        _implementations[splitterType] = implementation;\\r\\n        emit AddedSplitterType(splitterType, msg.sender, implementation);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Creates a new splitter contract as a factory with a deterministic address, returning the address of the newly created splitter contract.\\r\\n     * Returns the id of the created splitter contract.\\r\\n     * \\r\\n     * @param splitterType type of splitter\\r\\n     * @param shares list of tuples representing the payees and their shares in bps\\r\\n     */\\r\\n    function create(bytes32 splitterType, ISplitter.Shares[] memory shares) external returns (address payable) {\\r\\n        uint256 id = _counter.current();\\r\\n        address payable instance = payable(Clones.cloneDeterministic(_implementations[splitterType], bytes32(abi.encodePacked(id))));\\r\\n        ISplitter(instance).initialize(shares);\\r\\n        emit CreatedSplitter(id, splitterType, msg.sender, instance, shares);\\r\\n        _counter.increment();\\r\\n        return instance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gets a splitter given the unique identifier\\r\\n     * \\r\\n     * @param splitterType type of splitter\\r\\n     * @param index id of splitter to get contract for\\r\\n     * @return the Splitter payment contract\\r\\n     */\\r\\n    function get(bytes32 splitterType, uint256 index) external view returns (ISplitter) {\\r\\n        return ISplitter(payable(Clones.predictDeterministicAddress(_implementations[splitterType], bytes32(abi.encodePacked(index)), address(this))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @return the number of splitter instances released so far\\r\\n     */\\r\\n    function instances() external view returns (uint256) {\\r\\n        return _counter.current();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Emitted when a splitter is created.\\r\\n     * \\r\\n     * @param index the identifier of newly created edition\\r\\n     * @param splitterType the type of splitter\\r\\n     * @param creator the edition's owner\\r\\n     * @param contractAddress the address of the splitting contract\\r\\n     * @param shares the shares splitting rules\\r\\n     */\\r\\n    event CreatedSplitter(uint256 indexed index, bytes32 indexed splitterType, address indexed creator, address contractAddress, ISplitter.Shares[] shares);\\r\\n\\r\\n    /**\\r\\n     * Emitted when a splitter type is added.\\r\\n     * \\r\\n     * @param splitterType the type of splitter\\r\\n     * @param creator address adding the splitter template\\r\\n     * @param contractAddress the address of the splitting contract template\\r\\n     */\\r\\n     event AddedSplitterType(bytes32 indexed splitterType, address indexed creator, address contractAddress);\\r\\n}\\r\\n\",\"keccak256\":\"0x1640ebd5d360d1e4e2a0887326aa712aa2e9d67d5140c57b234f3a4361878508\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610bcc8061007e6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146100e85780638da5cb5b146100f25780639f2c391314610110578063f2fde38b1461012357600080fd5b806318ae19c2146100825780632dba7b10146100bf5780634d2ace66146100d2575b600080fd5b61009561009036600461087e565b610136565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100956100cd366004610969565b610204565b6100da610359565b6040519081526020016100b6565b6100f0610369565b005b60005473ffffffffffffffffffffffffffffffffffffffff16610095565b6100f061011e366004610a5b565b6103fb565b6100f0610131366004610a8b565b6105fb565b60008281526002602090815260408083205481519283018590526101fb9273ffffffffffffffffffffffffffffffffffffffff909116910160405160208183030381529060405261018690610aaf565b306040517f3d602d80600a3d3981f3363d3d373d3d3d363d730000000000000000000000008152606093841b60148201527f5af43d82803e903d91602b57fd5bf3ff000000000000000000000000000000006028820152921b6038830152604c8201526037808220606c830152605591012090565b90505b92915050565b60008061021060015490565b6000858152600260209081526040808320548151928301859052939450919261026a9273ffffffffffffffffffffffffffffffffffffffff909116910160405160208183030381529060405261026590610aaf565b61072b565b6040517fcb88ac1600000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff82169063cb88ac16906102bf908790600401610b54565b600060405180830381600087803b1580156102d957600080fd5b505af11580156102ed573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff1685837f67b4778dcbf9bd2f05225a7c7c61a3ae6c4f0029443328396b82fa024217b9cc848860405161033b929190610b67565b60405180910390a4610351600180546001019055565b949350505050565b600061036460015490565b905090565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6103f96000610809565b565b60005473ffffffffffffffffffffffffffffffffffffffff16331461047c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e6565b803b6104e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f74206120636f6e747261637400000000000000000000000000000000000060448201526064016103e6565b60008281526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1615610570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f53706c6974746572207479706520616c726561647920646566696e656400000060448201526064016103e6565b60008281526002602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85169081179091559151918252339184917fcd1a198d1bbaee59743439d5e40021114700cab0fdfb0af667999b2ca0765d35910160405180910390a35050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461067c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e6565b73ffffffffffffffffffffffffffffffffffffffff811661071f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103e6565b61072881610809565b50565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528360601b60148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037826000f591505073ffffffffffffffffffffffffffffffffffffffff81166101fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f455243313136373a2063726561746532206661696c656400000000000000000060448201526064016103e6565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806040838503121561089157600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156108f2576108f26108a0565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561093f5761093f6108a0565b604052919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461072857600080fd5b600080604080848603121561097d57600080fd5b8335925060208085013567ffffffffffffffff8082111561099d57600080fd5b818701915087601f8301126109b157600080fd5b8135818111156109c3576109c36108a0565b6109d1848260051b016108f8565b818152848101925060069190911b8301840190898211156109f157600080fd5b928401925b81841015610a4b5785848b031215610a0e5760008081fd5b610a166108cf565b8435610a2181610947565b81528486013561ffff81168114610a385760008081fd5b81870152835292850192918401916109f6565b8096505050505050509250929050565b60008060408385031215610a6e57600080fd5b823591506020830135610a8081610947565b809150509250929050565b600060208284031215610a9d57600080fd5b8135610aa881610947565b9392505050565b80516020808301519190811015610aee577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160200360031b1b821691505b50919050565b600081518084526020808501945080840160005b83811015610b49578151805173ffffffffffffffffffffffffffffffffffffffff16885283015161ffff168388015260409096019590820190600101610b08565b509495945050505050565b6020815260006101fb6020830184610af4565b73ffffffffffffffffffffffffffffffffffffffff831681526040602082015260006103516040830184610af456fea264697066735822122006981b063aad16561b12414e278238ce6aa8c6a5209a194327395a8070dbc0a164736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146100e85780638da5cb5b146100f25780639f2c391314610110578063f2fde38b1461012357600080fd5b806318ae19c2146100825780632dba7b10146100bf5780634d2ace66146100d2575b600080fd5b61009561009036600461087e565b610136565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100956100cd366004610969565b610204565b6100da610359565b6040519081526020016100b6565b6100f0610369565b005b60005473ffffffffffffffffffffffffffffffffffffffff16610095565b6100f061011e366004610a5b565b6103fb565b6100f0610131366004610a8b565b6105fb565b60008281526002602090815260408083205481519283018590526101fb9273ffffffffffffffffffffffffffffffffffffffff909116910160405160208183030381529060405261018690610aaf565b306040517f3d602d80600a3d3981f3363d3d373d3d3d363d730000000000000000000000008152606093841b60148201527f5af43d82803e903d91602b57fd5bf3ff000000000000000000000000000000006028820152921b6038830152604c8201526037808220606c830152605591012090565b90505b92915050565b60008061021060015490565b6000858152600260209081526040808320548151928301859052939450919261026a9273ffffffffffffffffffffffffffffffffffffffff909116910160405160208183030381529060405261026590610aaf565b61072b565b6040517fcb88ac1600000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff82169063cb88ac16906102bf908790600401610b54565b600060405180830381600087803b1580156102d957600080fd5b505af11580156102ed573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff1685837f67b4778dcbf9bd2f05225a7c7c61a3ae6c4f0029443328396b82fa024217b9cc848860405161033b929190610b67565b60405180910390a4610351600180546001019055565b949350505050565b600061036460015490565b905090565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6103f96000610809565b565b60005473ffffffffffffffffffffffffffffffffffffffff16331461047c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e6565b803b6104e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f74206120636f6e747261637400000000000000000000000000000000000060448201526064016103e6565b60008281526002602052604090205473ffffffffffffffffffffffffffffffffffffffff1615610570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f53706c6974746572207479706520616c726561647920646566696e656400000060448201526064016103e6565b60008281526002602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85169081179091559151918252339184917fcd1a198d1bbaee59743439d5e40021114700cab0fdfb0af667999b2ca0765d35910160405180910390a35050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461067c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e6565b73ffffffffffffffffffffffffffffffffffffffff811661071f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016103e6565b61072881610809565b50565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528360601b60148201527f5af43d82803e903d91602b57fd5bf300000000000000000000000000000000006028820152826037826000f591505073ffffffffffffffffffffffffffffffffffffffff81166101fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f455243313136373a2063726561746532206661696c656400000000000000000060448201526064016103e6565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806040838503121561089157600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156108f2576108f26108a0565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561093f5761093f6108a0565b604052919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461072857600080fd5b600080604080848603121561097d57600080fd5b8335925060208085013567ffffffffffffffff8082111561099d57600080fd5b818701915087601f8301126109b157600080fd5b8135818111156109c3576109c36108a0565b6109d1848260051b016108f8565b818152848101925060069190911b8301840190898211156109f157600080fd5b928401925b81841015610a4b5785848b031215610a0e5760008081fd5b610a166108cf565b8435610a2181610947565b81528486013561ffff81168114610a385760008081fd5b81870152835292850192918401916109f6565b8096505050505050509250929050565b60008060408385031215610a6e57600080fd5b823591506020830135610a8081610947565b809150509250929050565b600060208284031215610a9d57600080fd5b8135610aa881610947565b9392505050565b80516020808301519190811015610aee577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160200360031b1b821691505b50919050565b600081518084526020808501945080840160005b83811015610b49578151805173ffffffffffffffffffffffffffffffffffffffff16885283015161ffff168388015260409096019590820190600101610b08565b509495945050505050565b6020815260006101fb6020830184610af4565b73ffffffffffffffffffffffffffffffffffffffff831681526040602082015260006103516040830184610af456fea264697066735822122006981b063aad16561b12414e278238ce6aa8c6a5209a194327395a8070dbc0a164736f6c63430008090033",
  "devdoc": {
    "events": {
      "AddedSplitterType(bytes32,address,address)": {
        "params": {
          "contractAddress": "the address of the splitting contract template",
          "creator": "address adding the splitter template",
          "splitterType": "the type of splitter"
        }
      },
      "CreatedSplitter(uint256,bytes32,address,address,(address,uint16)[])": {
        "params": {
          "contractAddress": "the address of the splitting contract",
          "creator": "the edition's owner",
          "index": "the identifier of newly created edition",
          "shares": "the shares splitting rules",
          "splitterType": "the type of splitter"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addSplitterType(bytes32,address)": {
        "params": {
          "implementation": "ISplitter implementation contract to clone",
          "splitterType": "type of splitter"
        }
      },
      "create(bytes32,(address,uint16)[])": {
        "params": {
          "shares": "list of tuples representing the payees and their shares in bps",
          "splitterType": "type of splitter"
        }
      },
      "get(bytes32,uint256)": {
        "params": {
          "index": "id of splitter to get contract for",
          "splitterType": "type of splitter"
        },
        "returns": {
          "_0": "the Splitter payment contract"
        }
      },
      "instances()": {
        "returns": {
          "_0": "the number of splitter instances released so far"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AddedSplitterType(bytes32,address,address)": {
        "notice": "Emitted when a splitter type is added. "
      },
      "CreatedSplitter(uint256,bytes32,address,address,(address,uint16)[])": {
        "notice": "Emitted when a splitter is created. "
      }
    },
    "kind": "user",
    "methods": {
      "addSplitterType(bytes32,address)": {
        "notice": "Initializes the factory with the address of the implementation contract template "
      },
      "create(bytes32,(address,uint16)[])": {
        "notice": "Creates a new splitter contract as a factory with a deterministic address, returning the address of the newly created splitter contract. Returns the id of the created splitter contract. "
      },
      "get(bytes32,uint256)": {
        "notice": "Gets a splitter given the unique identifier "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1466,
        "contract": "contracts/splitters/SplitterFactory.sol:SplitterFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3994,
        "contract": "contracts/splitters/SplitterFactory.sol:SplitterFactory",
        "label": "_counter",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)2064_storage"
      },
      {
        "astId": 3998,
        "contract": "contracts/splitters/SplitterFactory.sol:SplitterFactory",
        "label": "_implementations",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(Counter)2064_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2063,
            "contract": "contracts/splitters/SplitterFactory.sol:SplitterFactory",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}